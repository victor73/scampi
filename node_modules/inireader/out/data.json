{
    "project": {},
    "files": {
        "lib/inheritdefault.js": {
            "name": "lib/inheritdefault.js",
            "modules": {},
            "classes": {
                "IniReaderInheritDefault": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/inireader.js": {
            "name": "lib/inireader.js",
            "modules": {
                "IniReader": 1
            },
            "classes": {
                "IniReaderCore": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "index.js": {
            "name": "index.js",
            "modules": {},
            "classes": {
                "IniReader": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "IniReader": {
            "name": "IniReader",
            "submodules": {},
            "classes": {
                "IniReaderInheritDefault": 1,
                "IniReaderCore": 1,
                "IniReader": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "index.js",
            "line": 7,
            "description": "Parses a .ini file and convert's it's content to a JS object\nParser regexps are from the Config::Simple Perl module",
            "is_constructor": 1,
            "itemtype": "main"
        }
    },
    "classes": {
        "IniReaderInheritDefault": {
            "name": "IniReaderInheritDefault",
            "shortname": "IniReaderInheritDefault",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IniReader",
            "file": "lib/inheritdefault.js",
            "line": 43,
            "description": "Extends the functionality of the IniReaderCore class. It makes possible for a\nini file object to inherit default values from another object. Similar to\nPython ConfigParser class http://docs.python.org/library/configparser.html",
            "is_constructor": 1,
            "extends": "IniReaderCore",
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration object. (In older versions it could be a\nstring too, which was the file name to parse, but that behaviour is\ndeprectaed)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "async",
                            "description": "If true, it will use asynchronous calls to\n    read and write files",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "file",
                            "description": "The file name to read or write during\n    operations",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "IniReaderCore": {
            "name": "IniReaderCore",
            "shortname": "IniReaderCore",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IniReader",
            "file": "lib/inireader.js",
            "line": 139,
            "description": "Parses a .ini file and convert's it's content to a JS object\nParser regexps are from the Config::Simple Perl module",
            "is_constructor": 1,
            "mainName": "IniReader",
            "tag": "main",
            "itemtype": "main",
            "_main": true,
            "extends": "EventEmitter",
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration object. (In older versions it could be a\nstring too, which was the file name to parse, but that behaviour is\ndeprectaed)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "async",
                            "description": "If true, it will use asynchronous calls to\n    read and write files",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "file",
                            "description": "The file name to read or write during\n    operations",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "async",
                    "description": "(Deprecated) Use the cfg.async instead.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "IniReader": {
            "name": "IniReader",
            "shortname": "IniReader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "IniReader",
            "namespace": "",
            "file": "index.js",
            "line": 7,
            "description": "Constructs either a {{#crossLink \"IniReaderCore\"}}{{/crossLink}} or a\n{{#crossLink \"IniReaderInheritDefault\"}}{{/crossLink}} class depends\non the inheritDefault configuration property.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "cfg",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "inheritDefault",
                            "description": "If true it will construct a\n    IniReaderInheritDefault class, if false a IniReaderCore",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "async",
                            "description": "If true, it will use asynchronous calls to\n    read and write files",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "file",
                            "description": "The file name to read or write during\n    operations",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "lib/inheritdefault.js",
            "line": 3,
            "itemtype": "property",
            "name": "interPolationRexG",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderInheritDefault"
        },
        {
            "file": "lib/inheritdefault.js",
            "line": 9,
            "itemtype": "property",
            "name": "interPolationRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderInheritDefault"
        },
        {
            "file": "lib/inheritdefault.js",
            "line": 16,
            "itemtype": "property",
            "name": "inheritDefault",
            "type": "{Boolean}",
            "value": "true",
            "final": 1,
            "class": "IniReaderInheritDefault"
        },
        {
            "file": "lib/inheritdefault.js",
            "line": 23,
            "itemtype": "method",
            "name": "inheritDefault",
            "params": [
                {
                    "name": "block",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "dflt",
                    "description": "",
                    "type": "Ojbect",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "IniReaderInheritDefault"
        },
        {
            "file": "lib/inheritdefault.js",
            "line": 63,
            "description": "Some kind of inheritance",
            "itemtype": "method",
            "name": "setDefaultValue",
            "params": [
                {
                    "name": "current",
                    "description": "",
                    "type": "String | Number | Object | Null | Boolean"
                },
                {
                    "name": "block",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "key",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "IniReaderInheritDefault"
        },
        {
            "file": "lib/inheritdefault.js",
            "line": 92,
            "itemtype": "method",
            "name": "getParam",
            "params": [
                {
                    "name": "param",
                    "description": "The name of the block where the key should be\ndefined. You can get the whole configuration tree by not setting this\nargument.\nYou can get a configuration block by passing its name: getParam('fooblock').\nYou can get a specific property by passing its block name with the property\nname. They should be concatenated with a \".\":\ngetParam('fooblock.barproperty').\nIf values object has a DEFAULT property it will extend the output with it.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The property\nvalue",
                "type": "String | Number | Object | Null | Boolean | Undefiend"
            },
            "class": "IniReaderInheritDefault"
        },
        {
            "file": "lib/inireader.js",
            "line": 4,
            "description": "Regular expression to find lines which shouldn't be parsed",
            "itemtype": "property",
            "name": "skipLineRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 11,
            "description": "Regular expression to remove white space chars from the beginning and end of\na line",
            "itemtype": "property",
            "name": "chompRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 19,
            "description": "Regular expression to find non whitespace characters",
            "itemtype": "property",
            "name": "nonWhitespaceRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 26,
            "description": "Regular expression to find key/value pairs in a line",
            "itemtype": "property",
            "name": "keyValueRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 33,
            "description": "Regular expression to find group entry marker in an ini file",
            "itemtype": "property",
            "name": "groupRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 40,
            "itemtype": "property",
            "name": "interPolationRexG",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 46,
            "itemtype": "property",
            "name": "interPolationRex",
            "final": 1,
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 55,
            "description": "Reads a file and returns it's lines as an array",
            "itemtype": "method",
            "name": "getLines",
            "params": [
                {
                    "name": "file",
                    "description": "File name to load and parse",
                    "type": "String"
                },
                {
                    "name": "cb",
                    "description": "Callback function to call when parse finished",
                    "type": "Function"
                },
                {
                    "name": "async",
                    "description": "Use synchronous or asynchronous file operations",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Lines of the file",
                "type": "Array"
            },
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 95,
            "description": "If a string is inside quotes, the quotes will be removed It doesn't care\nabout escaped/not escaped strings. So you can have thing like this:\n\"lorem ipsum\" dolor sit\"\nand you will receive:\nlorem ipsum\" dolor sit",
            "itemtype": "method",
            "name": "fixQuoted",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "String without starting and closing quotes",
                "type": "String"
            },
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 116,
            "description": "Return a deep copy of the object",
            "itemtype": "method",
            "name": "deepCopy",
            "params": [
                {
                    "name": "sourceObj",
                    "description": "The object which should be copied",
                    "type": "Object"
                },
                {
                    "name": "destinationObj",
                    "description": "The destination object which should have\nthe new properties after copy",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "Object with the new parameters",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "IniReaderCore"
        },
        {
            "file": "lib/inireader.js",
            "line": 160,
            "description": "Name of the file.\nDoing a load method and without specifying it's name directly that property\nwill be used.\nDoing a write method and without specifying it's name directly that property\nwill be used.",
            "itemtype": "property",
            "name": "file",
            "type": "{String}",
            "default": "null",
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 170,
            "description": "If true all file operation will be done asynchronously",
            "itemtype": "property",
            "name": "async",
            "type": "{Boolean}",
            "default": "false",
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 176,
            "description": "Error event emitted every time an error occured",
            "itemtype": "event",
            "name": "error",
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 180,
            "description": "Event emitted when a file parse finished",
            "itemtype": "event",
            "name": "fileParse",
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 184,
            "description": "Event emitted when the configuration has been written to a file",
            "itemtype": "event",
            "name": "fileWritten",
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 188,
            "description": "Initializes the configuration properties",
            "itemtype": "method",
            "name": "construct",
            "params": [
                {
                    "name": "cfg",
                    "description": "Configuration object. (In older versions it could be a\nstring too, which was the file name to parse, but that behaviour is\ndeprectaed)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "async",
                            "description": "If true, it will use asynchronous calls to\n    read and write files",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "file",
                            "description": "The file name to read or write during\n    operations",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "async",
                    "description": "(Deprecated) Use the cfg.async instead.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "is_constructor": 1,
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 217,
            "description": "Loads a ini file",
            "itemtype": "method",
            "name": "load",
            "params": [
                {
                    "name": "String",
                    "description": "file"
                }
            ],
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 246,
            "description": "Tries to find a group name in a line",
            "itemtype": "method",
            "name": "parseSectionHead",
            "type": "{String|False}",
            "return": {
                "description": "the group name if found or false",
                "type": "String | False"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 257,
            "description": "Tries to find a key/value pair in a line",
            "itemtype": "method",
            "name": "keyValueMatch",
            "type": "{Object|False}",
            "return": {
                "description": "the key value pair in an object ({key: 'key',\nvalue;'value'}) if found or false",
                "type": "Object | False"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 269,
            "description": "Parses an init file, and extracts blocks with keys and values",
            "itemtype": "method",
            "name": "parseFile",
            "return": {
                "description": "The configuration tree",
                "type": "Object"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 320,
            "description": "Method to get a one property value or a ini block or all of the block of\nthe loaded configuration",
            "itemtype": "method",
            "name": "getBlock",
            "return": {
                "description": "The property\nvalue",
                "type": "String | Number | Object | Null | Boolean | Undefiend"
            },
            "type": "Object",
            "deprecated": true,
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 332,
            "itemtype": "method",
            "name": "getValue",
            "params": [
                {
                    "name": "String",
                    "description": "block The name of the block where the key should be defined"
                },
                {
                    "name": "String",
                    "description": "key The name of the key which value should be returned"
                }
            ],
            "return": {
                "description": "the value of the key",
                "type": "String | Number | Object | Null | Boolean | Undefiend"
            },
            "deprecated": true,
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 347,
            "description": "Method to get the configuration tree or a configuration block a specific\nvalue in a block.",
            "itemtype": "method",
            "name": "getParam",
            "params": [
                {
                    "name": "param",
                    "description": "The name of the block where the key should be\ndefined. You can get the whole configuration tree by not setting this\nargument.\nYou can get a configuration block by passing its name: getParam('fooblock').\nYou can get a specific property by passing its block name with the property\nname. They should be concatenated with a \".\":\ngetParam('fooblock.barproperty').",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The property\nvalue",
                "type": "String | Number | Object | Null | Boolean | Undefiend"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 382,
            "description": "Sets the parameter in the loaded configuration object.",
            "itemtype": "method",
            "name": "setParam",
            "params": [
                {
                    "name": "prop",
                    "description": "The name of the property which should be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value of the property",
                    "type": "String | Number | Object | Null | Boolean"
                }
            ],
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 408,
            "description": "Setter and getter method. If only the first parameter defined it will return\nthe value of the parameter. If the second parameter set, it will set the\nparameter in the loaded configuration object.",
            "itemtype": "method",
            "name": "param",
            "params": [
                {
                    "name": "prop",
                    "description": "The name of the property which should be returned or\nwhich should be set",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value of the property",
                    "type": "String | Number | Object | Null | Boolean"
                }
            ],
            "return": {
                "description": "The property\nvalue if the method was called with one argument or undefined if it was\ncalled with two arguments",
                "type": "String | Number | Object | Null | Boolean | Undefiend"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 430,
            "itemtype": "method",
            "name": "getLe",
            "params": [
                {
                    "name": "le",
                    "description": "Predefined line ending character. Only \"\\n\", \"\\r\" and\n\"\\r\\n\" are valid values!",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The line ending character or characters. Default is \"\\n\"",
                "type": "String"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 440,
            "description": "Converts the currently loaded configuration to a INI file.",
            "itemtype": "method",
            "name": "serialize",
            "params": [
                {
                    "name": "le",
                    "description": "Predefined line ending character",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Currently loaded configuration as a INI file content which\ncould be written directly into a file",
                "type": "String"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 475,
            "description": "Write ini file to the disk",
            "itemtype": "method",
            "name": "write",
            "params": [
                {
                    "name": "file",
                    "description": "File name",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "le",
                    "description": "Line ending string",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "IniReaderCore",
            "module": "IniReader"
        },
        {
            "file": "lib/inireader.js",
            "line": 514,
            "itemtype": "method",
            "name": "interpolate",
            "params": [
                {
                    "name": "param",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "IniReaderCore",
            "module": "IniReader"
        }
    ]
}