{
  "name": "inireader",
  "description": "Module to create, read and/or change ini configuration files",
  "url": "https://github.com/Ajnasz/IniReader",
  "keywords": [
    "ini",
    "config",
    "configuration",
    "parser"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/Ajnasz/IniReader.git"
  },
  "bugs": {
    "url": "https://github.com/Ajnasz/IniReader/issues"
  },
  "author": {
    "name": "Lajos Koszti",
    "email": "ajnasz@ajnasz.hu",
    "url": "http://ajnasz.hu"
  },
  "scripts": {
    "test": "make"
  },
  "version": "0.3.1",
  "readme": "IniReader is a small module for nodejs. You can parse .ini configuration files with it.\n\n## The constructor ##\n### Arguments ###\n\nThe constructor accepts configuration parameters as an object:\n\n* async: (Optional), Boolean, default: true, Set to true if you wan't to use asynchron calls to read and/or write configuration files\n* file: (Optional), String, default: empty, You can set the configuration file name here\n* inheritDefault: (Optional), String, default: false, If this option is true and your configuration has a section with a name `DEFAULT` the other sections will inherit it's values if they are not defined.\n\n\n## Methods ##\n\n\n### load ###\nLoads and parses the configuration file.\n\n#### Arguments: ####\n* file: (Optional), String, Name of the configuration file to read. If you didn't set the file name in the constructor, you must do it here.\n\n\n### write ###\nWrites out the configuration into a file\n\n#### Arguments: ####\n* file: (Optional), String, Name of the configuration file to write. If you didn't set the file name in the constructor, you must do it here.\n* le: (Optional), String, default: '\\n', Line ending. Possible values are: '\\n', '\\r\\n', '\\r'\n\n\n### param ###\nMethod to get or set a configuration value, or a section or the whole configuration as an object\n\n#### Arguments: ####\n* prop: (Optional), String, The name of the property or block. If the argument is empty, it will return the whole configuration object. To retreive a block, give the name of the block. `iniReaderInstance.param('blockname')`. To retreive a property value, give the name of the block and the property name concatenated witha a dot: `blockname.propertyname`.\n* value: (Optional), String,Number,Object, The value of the parameter. Pass an object to add several properties to a section\n\n### interpolate ###\n\n#### _Arguments_ ####\n* _prop_: (Optional), String, The name of the property or block.\n\n#### _Description_ ####\nSame as the method _param_ with the argument _prop_ but this method\nextends recursively all the patterns _%(xxx)_ by the value which would\nbe returned by _param(xxx)_. The patterns can be _%(blockname.key)_ or _%(key)_,\nassuming that _key_ refers to the current block.\n\nFor example, if the file _.ini_ is\n```\n [sectionA]\n a=foo\n b=%(a)/bar\n [sectionB]\n c=%(sectionA.b)/baz\n```\n_interpolate_ called with the parameter _'sectionA.b'_ will return\n_foo/bar_ and, with the parameter _'sectionB.c'_, it will return\n_foo/bar/baz_.\n\n## Basic usage ##\n\n```javascript\n// include\nvar iniReader = require('./inireader');\n// initialize\nvar parser = new iniReader.IniReader();\nparser.load('./myconf.ini');\n// get the config tree\nparser.getBlock();\n// get only a sub section\nparser.param('blockname');\n// get a config value. The blockname is mandantory\nparser.param('blockname.key');\n// add or update (if exists) config\n// if the block doesn't exists it will be created;\nparser.param('blockname.key', 'foobar');\n// update the config\nparser.write();\n// create a new config\nparser.write('myotherconf.ini');\n```\n\n## Using callbacks ##\n\n```javascript\nvar iniReader = require('./inireader');\n// initialize\nvar parser = new iniReader.IniReader();\nparser.on('fileParse', function() {\n  // get the config tree\n  this.getBlock();\n  // get only a sub section\n  this.param('blockname');\n  // get a config value. The blockname is mandantory\n  this.param('blockname.key');\n  // add or update (if exists) config\n  // if the block doesn't exists it will be created;\n  parser.param('blockname.key', 'foobar');\n  // update the config\n  parser.write();\n  // create a new config\n  parser.write('myotherconf.ini');\n});\nparser.load('./myconf.ini');\n```\n\n## Using async file reading ##\n\n```javascript\nvar iniReader = require('./inireader');\n// initialize\nvar parser = new iniReader.IniReader({async: true});\nparser.on('fileParse', function() {\n  // get the config tree\n  this.getBlock();\n  // get only a sub section\n  this.param('blockname');\n  // get a config value. The blockname is mandantory\n  this.param('blockname.key');\n  // add or update (if exists) config\n  // if the block doesn't exists it will be created;\n  parser.param('blockname.key', 'foobar');\n  // update the config\n  parser.write();\n  // create a new config\n  parser.write('myotherconf.ini');\n});\nparser.load('./myconf.ini');\n```\n",
  "readmeFilename": "README.md",
  "_id": "inireader@0.3.1",
  "_from": "inireader@0.3.1"
}
